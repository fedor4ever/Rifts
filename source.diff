diff -ur Rifts/Code/src/Ai/RemoteCombatAI.cpp Rifts_new/Code/src/Ai/RemoteCombatAI.cpp
--- Rifts/Code/src/Ai/RemoteCombatAI.cpp	2010-08-30 22:14:18.000000000 +0200
+++ Rifts_new/Code/src/Ai/RemoteCombatAI.cpp	2021-12-11 22:06:09.918099500 +0100
@@ -435,10 +435,14 @@
             //        }
 
             HideAbilityName();
+#if USE_BLUETOOTH == 1
             if (false == ProcessCoreCombatMessage())
             {
                 return 0;
             }
+#else
+            return 0;
+#endif
 
             GetGlobals()->m_bShowLocator = true;
             if (m_lNetworkMessages.size() > 0)
diff -ur Rifts/Code/src/FrontEnd/FrontEndCore.cpp Rifts_new/Code/src/FrontEnd/FrontEndCore.cpp
--- Rifts/Code/src/FrontEnd/FrontEndCore.cpp	2010-08-30 22:14:18.000000000 +0200
+++ Rifts_new/Code/src/FrontEnd/FrontEndCore.cpp	2021-12-11 22:36:11.414039100 +0100
@@ -17,7 +17,9 @@
 #include "RiftsStringID.h"
 #include "Data/EntityDataResource.h"
 #include "Main/PartyData.h"
+#if USE_BLUETOOTH == 1
 #include "Game/Cores/BluetoothConnectionCore.h"
+#endif
 #include "Game/Cores/ArenaMainMenu.h"
 #include "Game/Sector/SectorListResource.h"
 #include "Game/Quests/QuestControl.h"
@@ -177,6 +179,20 @@
 
             g_GameManager->m_StartPositionID = 0;
             break;
+#if ENABLE_E3_DEMO == 1
+        case FRONTEND_E3DEMO:
+            g_GameManager->m_CurrentMapID = WMAP_NA_Map;
+            g_GameManager->m_CurrentMapNodeID = -1;
+            g_GameManager->m_NextSectorID = 0;
+
+            GetGlobals()->SetCurrentLanguage((Language)LANG_ID_ENGLISH);
+            CreateHackedParty();
+            GetGlobals()->m_NextGameStage = GAME_MAIN_STAGE;
+            g_GameManager->m_NextSectorID = SCTR_DEMO_Town_01;
+
+            g_GameManager->m_StartPositionID = 0;
+            break;
+#endif
         case FRONTEND_LOADGAME:
             {
                 GameFileCore* pCore = BB_NEW(GameFileCore);
@@ -238,6 +254,7 @@
                 GetGlobals()->m_NextGameStage = GAME_MAIN_STAGE;
             }
             break;
+#if USE_BLUETOOTH == 1
         case FRONTEND_BLUETOOTH: 
             // [DEMO]
             if (!g_Config->m_DemoMode)
@@ -247,6 +264,7 @@
                 GetGlobals()->m_NextGameStage = GAME_MAIN_STAGE;
             }
             break;
+#endif
 
 //        case FRONTEND_CREDITS: // Run cutscene script
 //        {
@@ -540,10 +558,15 @@
 
     m_pOptionList->SetMenuSpacing(9,3,7);
     m_pOptionList->AddButton(StringTable(STR_MENU_FE_START),        FRONTEND_STARTGAME);
+#if ENABLE_E3_DEMO == 1
+    m_pOptionList->AddButton("Start E3 Demo",                       FRONTEND_E3DEMO);
+#endif
     m_pOptionList->AddButton(StringTable(STR_MENU_MAIN_LOAD_GAME),  FRONTEND_LOADGAME);
     m_pOptionList->AddButton(StringTable(STR_MENU_MAIN_OPTIONS),    FRONTEND_OPTION);
 
+#if USE_BLUETOOTH == 1
     m_pOptionList->AddButton(StringTable(STR_MENU_TEXT_BLUETOOTH),  FRONTEND_BLUETOOTH); 
+#endif
     m_pOptionList->AddButton(StringTable(STR_MENU_TEXT_ARENA),      FRONTEND_ARENA); 
     m_pOptionList->AddButton(StringTable(STR_MENU_TEXT_QUIT),       FRONTEND_EXIT);
 
@@ -565,7 +588,9 @@
     // [DEMO] 
     if (g_Config->m_DemoMode)
     {
+#if USE_BLUETOOTH == 1
        m_pOptionList->SetButtonLockByTag(FRONTEND_BLUETOOTH, true);
+#endif
        m_pOptionList->SetButtonLockByTag(FRONTEND_ARENA, true);
        m_pOptionList->SetButtonLockByTag(FRONTEND_LOADGAME, true);
     }
@@ -788,4 +813,4 @@
 
         GetGlobals()->DeleteSettings();
     }
-}
\ No newline at end of file
+}
diff -ur Rifts/Code/src/FrontEnd/FrontEndCore.h Rifts_new/Code/src/FrontEnd/FrontEndCore.h
--- Rifts/Code/src/FrontEnd/FrontEndCore.h	2010-08-30 22:14:18.000000000 +0200
+++ Rifts_new/Code/src/FrontEnd/FrontEndCore.h	2021-12-11 22:30:44.056470700 +0100
@@ -20,6 +20,7 @@
 enum eFRONTEND_OPTIONS
 {
     FRONTEND_STARTGAME = 0,
+    FRONTEND_E3DEMO,
     FRONTEND_LOADGAME, 
     FRONTEND_NORTHAMERICA,
     FRONTEND_NGR,
diff -ur Rifts/Code/src/Game/Cores/ArenaGameOptions.cpp Rifts_new/Code/src/Game/Cores/ArenaGameOptions.cpp
--- Rifts/Code/src/Game/Cores/ArenaGameOptions.cpp	2010-08-30 22:14:18.000000000 +0200
+++ Rifts_new/Code/src/Game/Cores/ArenaGameOptions.cpp	2021-12-11 22:08:34.870556500 +0100
@@ -14,7 +14,9 @@
 #include "System/TextTables.h"
 #include "Game/Cores/GameFileCore.h"
 #include "Network/NetworkGameTypes.h"
+#if USE_BLUETOOTH == 1
 #include "BTGameMenuCore.h"
+#endif
 #include "ArenaNameGenCore.h"
 #include "ArenaGameView.h"
 #include "ArenaCharacterSelect.h"
@@ -667,11 +669,12 @@
     if (GetLastState() == GOS_SECTOR_SELECT)
     {
         g_MessageManager->SetGameType(m_iLastGameOptionSelection);
+#if USE_BLUETOOTH == 1
         BTGameMenuCore* pCore = BB_NEW(BTGameMenuCore);
         pCore->m_bUseOldSetting = true;
         SetPushedCore(pCore);
         g_CoreManager->PushCore(pCore);
-
+#endif
         SetNextState(GOS_SECTOR_SELECT);
         return;
     }
@@ -704,10 +707,11 @@
         m_iLastGameOptionSelection = int(EVENT_DATA);
 
         g_MessageManager->SetGameType(m_iLastGameOptionSelection);
+#if USE_BLUETOOTH == 1
         BTGameMenuCore* pCore = BB_NEW(BTGameMenuCore);
         SetPushedCore(pCore);
         g_CoreManager->PushCore(pCore);
-
+#endif
         SetNextState(GOS_SECTOR_SELECT);
     }
     ON_EVENT(EVENT_MENU_CANCEL)
diff -ur Rifts/Code/src/Game/Cores/CoreManager.cpp Rifts_new/Code/src/Game/Cores/CoreManager.cpp
--- Rifts/Code/src/Game/Cores/CoreManager.cpp	2010-08-30 22:14:18.000000000 +0200
+++ Rifts_new/Code/src/Game/Cores/CoreManager.cpp	2021-12-11 22:09:13.930903400 +0100
@@ -13,8 +13,9 @@
 #include "Game/Cores/MapCore.h"
 #include "Game/Cores/SinglePlayerGameCore.h"
 #include "Game/Cores/ArenaGameCore.h"
+#if USE_BLUETOOTH == 1
 #include "Game/Cores/BluetoothGameCore.h"
-
+#endif
 
 /*!============================================================================== 
  \brief  Static constructor to create and return a new instance of this class
@@ -427,11 +428,11 @@
             case CORE_TYPE_ARENA_GAME:
                 pNewCore = BB_NEW(ArenaGameCore); 
                 break;
-
+#if USE_BLUETOOTH == 1
             case CORE_TYPE_BLUETOOTH_GAME:
                 pNewCore = BB_NEW(BluetoothGameCore); 
                 break;
-
+#endif
             default:
                 BB_LOG("Unknown core type: %d", coreType); 
                 _BREAK; 
diff -ur Rifts/Code/src/Main/Globals.cpp Rifts_new/Code/src/Main/Globals.cpp
--- Rifts/Code/src/Main/Globals.cpp	2010-08-30 22:14:20.000000000 +0200
+++ Rifts_new/Code/src/Main/Globals.cpp	2021-12-11 21:28:26.422393700 +0100
@@ -172,8 +172,12 @@
     m_pGameManager = NULL; 
     m_pDebugLink = NULL;
 
+#if USE_BACK_LIGHT_CTRL == 1
     m_BackLightControl = NULL;
+#endif
+#if USE_VIBRA_CTRL == 1
     m_VibrationControl = NULL;
+#endif
     m_bKeepOnBackLight = false;
     m_bBackLightOption = false;
     m_bForceOnBackLight = false;
@@ -251,10 +255,15 @@
     BB_DELETE(m_SFX); SHUTDOWN_LOG("sfx");
 
     //created via symbian factory method
+
+#if USE_BACK_LIGHT_CTRL == 1
     delete(m_BackLightControl); SHUTDOWN_LOG("bl");
     m_BackLightControl = NULL;
+#endif
+#if USE_VIBRA_CTRL == 1
     delete(m_VibrationControl); SHUTDOWN_LOG("vib");
     m_VibrationControl = NULL;
+#endif
 
     m_bStopMovingEveyone = false;
 
diff -ur Rifts/Code/src/Main/Globals.h Rifts_new/Code/src/Main/Globals.h
--- Rifts/Code/src/Main/Globals.h	2010-08-30 22:14:20.000000000 +0200
+++ Rifts_new/Code/src/Main/Globals.h	2021-12-11 21:27:20.398083700 +0100
@@ -25,8 +25,12 @@
 #include "Data/DBObjects.h"
 #include "Math/Isaac.h"
 
+#if USE_BACK_LIGHT_CTRL == 1
 #include <BackLightCtrl.h>
+#endif
+#if USE_VIBRA_CTRL == 1
 #include <VibraCtrl.h>
+#endif
 #include <Hal.h>
 
 class Timer;
@@ -160,7 +164,9 @@
 
     bool             KeepBackLightOn() { return (m_bForceOnBackLight || m_bKeepOnBackLight || m_bBackLightOption); }
 
+#if USE_BACK_LIGHT_CTRL == 1
     CBacklightControl* GetBackLightControl() { return m_BackLightControl; }
+#endif
     bool m_bKeepOnBackLight;    //Player Controled setting for backlight
     bool m_bForceOnBackLight;   //Force the backlight to stay on no matter what
     bool m_bBackLightOption;    //A dummy Backlight option that does nothing but has to be here SGR
@@ -265,8 +271,12 @@
 	DebugLink*       m_pDebugLink;
 	SoundMonitor*    m_pSoundMonitor;
 
+#if USE_BACK_LIGHT_CTRL == 1
     CBacklightControl* m_BackLightControl;
+#endif
+#if USE_VIBRA_CTRL == 1
     CVibraControl* m_VibrationControl;
+#endif
 
     // Party data container for fast access to party info
     PartyData        m_PartyData;
diff -ur Rifts/Code/src/Network/ArenaManager_DEMO.cpp Rifts_new/Code/src/Network/ArenaManager_DEMO.cpp
--- Rifts/Code/src/Network/ArenaManager_DEMO.cpp	2010-08-30 22:14:20.000000000 +0200
+++ Rifts_new/Code/src/Network/ArenaManager_DEMO.cpp	2021-12-11 22:11:55.515643000 +0100
@@ -14,8 +14,8 @@
 // UID for the DEMO.
 const TUid BBMath::KUIDRIFTS = { 0x101fd432 };
 // Other DEMO parameters
-const TSTR* BBMath::g_DFilePathame() { return ":\\system\\apps\\Rifts_Demo\\"; }
-const TSTR* BBMath::g_FilePath() { return "c:\\system\\apps\\Rifts_Demo\\"; }
+const TSTR* BBMath::g_DFilePathame() { return ":\\system\\apps\\6R49\\"; }
+const TSTR* BBMath::g_FilePath() { return "c:\\system\\apps\\6R49\\"; }
 
 #include "Utility/df_vsprintf.h" // for BB_LOG
 #include "../Utility/SymbStrings.h"	// for DesToStr
diff -ur Rifts/Code/src/Network/BluetoothManager.cpp Rifts_new/Code/src/Network/BluetoothManager.cpp
--- Rifts/Code/src/Network/BluetoothManager.cpp	2010-08-30 22:14:20.000000000 +0200
+++ Rifts_new/Code/src/Network/BluetoothManager.cpp	2021-12-11 22:03:02.474307500 +0100
@@ -8,8 +8,10 @@
 
 #include "common.h"
 #include "BluetoothManager.h"
+#if USE_BLUETOOTH == 1
 #include <GameBTComms.h>
 #include <Resolver.h>
+#endif
 #include "System/SystemAppUi.h"
 #include "Network/MessageManager.h"
 #include "Network/Message.h"
@@ -47,9 +49,10 @@
 ==============================================================================*/ 
 BluetoothManager::BluetoothManager()
 {
+#if USE_BLUETOOTH == 1
     m_pBluetoothComms = NULL; 
     m_pResolver = NULL; 
-
+#endif
     m_IsSearchingForDevices = false; 
     m_IsBluetoothDefaultEnabled = false; 
 
@@ -67,8 +70,10 @@
 BluetoothManager::~BluetoothManager()
 {
     // Destroy everything!
+#if USE_BLUETOOTH == 1
     delete m_pBluetoothComms; 
     delete m_pResolver; 
+#endif
 }
 
 
@@ -78,9 +83,10 @@
 ==============================================================================*/ 
 void BluetoothManager::ConstructL()
 {
+#if USE_BLUETOOTH == 1
     m_pBluetoothComms = CGameBTComms::NewL(*this, KUIDRIFTS); 
     m_pResolver = CResolver::NewL(*this, NULL); 
-
+#endif
     // Store default bluetooth on/off setting so we can restore it at exit.
     m_IsBluetoothDefaultEnabled = IsBluetoothEnabled(); 
 
@@ -108,6 +114,7 @@
 {
     BB_LOG("BluetoothManager::Shutdown()"); 
 
+#if USE_BLUETOOTH == 1
     if (m_IsSearchingForDevices)
     {
         m_IsSearchingForDevices = false;
@@ -135,6 +142,7 @@
     {
         BB_LOG("Bluetooth not toggled (no need to)");
     }
+#endif
 }
 
 /*!============================================================================== 
@@ -144,6 +152,7 @@
 ==============================================================================*/ 
 int BluetoothManager::Pulse()
 {
+#if USE_BLUETOOTH == 1
     // Are we connected?  If not, then just skip this pulse...
     if (!IsConnected()) 
     {
@@ -226,7 +235,7 @@
 //        }
 //        g_MessageManager->m_bIsSaving = false; 
 //    }
-
+#endif
     return 0; 
 }
 
@@ -250,14 +259,23 @@
 ==============================================================================*/ 
 void BluetoothManager::SaveOriginalName()
 {
+#if USE_BLUETOOTH == 1
     if (m_pBluetoothComms && m_OriginalDeviceName.Size() == 0)
+#else
+    if (m_OriginalDeviceName.Size() == 0)
+#endif
     {
         THostName name; 
+#if USE_BLUETOOTH == 1
         m_pBluetoothComms->GetLocalDeviceName(name);
+#else
+        StrToDes(name, "Juicer");
+#endif
 
         // See if the name was already prefixed from a previous crash.  If so, 
         // try to restore the original name sans prefix
         //if (name.Find(m_Prefix) == 0) 
+#if USE_BLUETOOTH == 1
         if (IsNamePrefixed(name))
         { 
             //probably due to previous crash, name has already been prefixed
@@ -265,6 +283,7 @@
 		    m_OriginalDeviceName = name.Mid(GetPrefixLength()); //fix name
         }
         else
+#endif
         {
             m_OriginalDeviceName = name; 
         }
@@ -295,6 +314,7 @@
 /*!============================================================================== 
  \brief  Check if bluetooth is available and not currently is in use (busy)
 ==============================================================================*/ 
+#if USE_BLUETOOTH == 1
 bool BluetoothManager::IsBluetoothAvailable()
 {
     _LIT(KL2Cap, "L2CAP" );
@@ -326,17 +346,22 @@
     }
     return isAvailable; 
 }
+#endif
 
 /*!============================================================================== 
  \brief  Check if the device is bluetooth-enabled
 ==============================================================================*/ 
 bool BluetoothManager::IsBluetoothEnabled()
 {
+#if USE_BLUETOOTH == 1
     if (!m_pBluetoothComms) return false; 
 
     TBool powerState; 
     m_pBluetoothComms->BluetoothPowerState(powerState); 
     return powerState != 0;
+#else
+    return false;
+#endif
 }
 
 
@@ -346,7 +371,11 @@
 ==============================================================================*/ 
 bool BluetoothManager::IsConnected()
 {
+#if USE_BLUETOOTH == 1
     return m_pBluetoothComms && CGameBTComms::ENotConnected != m_pBluetoothComms->ConnectState(); 
+#else
+    return false;
+#endif
 }
 
 
@@ -366,7 +395,11 @@
 ==============================================================================*/ 
 bool BluetoothManager::IsClient()
 {
+#if USE_BLUETOOTH == 1
     return m_pBluetoothComms && CGameBTComms::EClient == m_pBluetoothComms->ConnectionRole(); 
+#else
+    return false;
+#endif
 }
 
 
@@ -375,7 +408,11 @@
 ==============================================================================*/ 
 bool BluetoothManager::IsHost()
 {
+#if USE_BLUETOOTH == 1
     return m_pBluetoothComms && CGameBTComms::EHost == m_pBluetoothComms->ConnectionRole(); 
+#else
+    return true;
+#endif
 }
 
 /*!============================================================================== 
@@ -384,10 +421,10 @@
 ==============================================================================*/ 
 int BluetoothManager::EnableBluetooth(bool a_Enabled)
 {
+#if USE_BLUETOOTH == 1
     Assert(m_pBluetoothComms); 
 
     BB_LOG("EnableBluetooth(%d)", a_Enabled); 
-
     TInt err = m_pBluetoothComms->SetBluetoothPowerState(a_Enabled); 
     User::After(1000); 
 
@@ -397,6 +434,9 @@
     }
     
     return err;
+#else
+    return -5; //kErrNotSupported
+#endif
 }
 
 /*!============================================================================== 
@@ -409,6 +449,7 @@
 bool BluetoothManager::StartHost(int a_GameType, uint a_GameID)
 {
     BB_LOG("BluetoothManager::StartHost"); 
+#if USE_BLUETOOTH == 1
     if (!IsBluetoothEnabled())
     {
         BB_LOG("ERROR:  StartHost() - Bluetooth is disabled"); 
@@ -463,6 +504,9 @@
     // Host is ready to listen for clients attempting to connect.
     m_pBluetoothComms->SetHostAcceptMode(CGameBTComms::EConfirmClients); 
     return true; 
+#else
+    return false;
+#endif
 }
 
 
@@ -474,7 +518,9 @@
 {
     m_IdleTime = 0; 
     // Host is ready to listen for clients attempting to connect.
+#if USE_BLUETOOTH == 1
     m_pBluetoothComms->SetHostAcceptMode(CGameBTComms::EConfirmClients); 
+#endif
     return true; 
 }
 
@@ -484,6 +530,7 @@
 bool BluetoothManager::StartClient(uint a_GameID)
 {
     BB_LOG("BluetoothManager::StartClient"); 
+#if USE_BLUETOOTH == 1
     if (!IsBluetoothEnabled())
     {
         BB_LOG("ERROR: StartClient() - Bluetooth is disabled!");
@@ -502,7 +549,12 @@
     m_VirtualDeviceID = -1;
 
     if (m_CurrentDeviceName.Size() == 0)
+    {
         m_pBluetoothComms->GetLocalDeviceName(m_CurrentDeviceName);
+    }
+#else
+    return false;
+#endif
 
     // First, check to make sure I have a valid name (possibly due to a previous game session where I was the host that crashed...)
 #ifdef USE_BT_PREFIX
@@ -531,6 +583,7 @@
         m_DeviceState[i] = BT_DEVICE_STATE_NONE; 
     }
 
+#if USE_BLUETOOTH == 1
     TRAPD(err, m_pBluetoothComms->StartClientL()); 
 
     if ((KErrNone != err) || !m_pResolver->IsReady())
@@ -543,6 +596,9 @@
 //    m_pBluetoothComms->SetSearchModeLimited(true); 
 
     return true; 
+#else
+    return false;
+#endif
 }
 
 /*!============================================================================== 
@@ -552,6 +608,7 @@
 bool BluetoothManager::StartDeviceRequest()
 {
     BB_LOG("BluetoothManager::StartDeviceRequest() begin"); 
+#if USE_BLUETOOTH == 1
     if (m_pResolver->IsReady())
     {
 //        m_pResolver->RequestDeviceList();
@@ -562,6 +619,7 @@
     }
     m_IsSearchingForDevices = false; 
     BB_LOG("BluetoothManager::StartDeviceRequest() failed"); 
+#endif
     return false;
 }
 
@@ -588,8 +646,9 @@
 	if (m_DeviceID >= 0)
         m_DeviceName[m_DeviceID] = l_Name; 
 
-
+#if USE_BLUETOOTH == 1
     m_pBluetoothComms->SetLocalDeviceName(l_Name); 
+#endif
 
     return true;
 }
@@ -608,12 +667,14 @@
 
     m_GameName = m_CurrentDeviceName; 
 
+#ifdef USE_BT_PREFIX
     if (IsNamePrefixed(m_GameName))
     { 
         THostName name = m_GameName; 
         //probably due to previous crash, name has already been prefixed
 		m_GameName = name.Mid(GetPrefixLength()); //fix name
 	}
+#endif
 
     if (m_DeviceID >= 0)
         m_DeviceName[m_DeviceID] = m_GameName; 
@@ -624,9 +685,10 @@
 /*!============================================================================== 
  \brief  
 ==============================================================================*/ 
+#if USE_BLUETOOTH == 1
 void BluetoothManager::DeclareDevice(const TDeviceDetails& a_Device)
 {
-    Assert(m_pBluetoothComms); 
+    Assert(m_pBluetoothComms);
 
     TRAPD(err, m_pBluetoothComms->DeclareRemoteDevice(a_Device)); 
 
@@ -635,6 +697,7 @@
         BB_LOG("ERROR:  Failed to declare a device"); 
     }
 }
+#endif
 
 /*!============================================================================== 
  \brief  I want to connect to all declared clients (if I'm host), or connect to the
@@ -642,6 +705,7 @@
 ==============================================================================*/ 
 bool BluetoothManager::Connect()
 {
+#if USE_BLUETOOTH == 1
     Assert(m_pBluetoothComms); 
     if (!m_pBluetoothComms) return false; 
 
@@ -655,6 +719,9 @@
 
     TInt err = m_pBluetoothComms->Connect();
     return (err == KErrNone); 
+#else
+    return false;
+#endif
 }
 
 
@@ -669,16 +736,21 @@
     if (IsClient() && m_IsSearchingForDevices)
     {
         m_IsSearchingForDevices = false;
+#if USE_BLUETOOTH == 1
         m_pResolver->CancelDeviceListRequest(); 
+#endif
     }
 
     if (!g_MessageManager->IsNetworkActive())
     {
         // Cancel any ongoing connection attempt...
+#if USE_BLUETOOTH == 1
         m_pBluetoothComms->Disconnect();
+#endif
         return;
     }
 
+#if USE_BLUETOOTH == 1
     Assert(m_pBluetoothComms);
 
     if (-1 == a_DeviceID)
@@ -689,6 +761,7 @@
     {
         m_pBluetoothComms->Disconnect(a_DeviceID, a_Permanently);
     }
+#endif
 
     // Notify the message manager that I am no longer in a BT connection
     g_MessageManager->SetConnectionType(MessageManager::CONNECTION_NONE);
@@ -716,7 +789,9 @@
         if (m_IsSearchingForDevices)
         {
             m_IsSearchingForDevices = false;
+#if USE_BLUETOOTH == 1
             m_pResolver->CancelDeviceListRequest(); 
+#endif
         }
     }
 }
@@ -729,17 +804,21 @@
 ==============================================================================*/ 
 void BluetoothManager::EndSession()
 {
+#if USE_BLUETOOTH == 1
     Assert(m_pBluetoothComms);
     BB_LOG("BluetoothManager::EndSession()"); 
 //    g_WriteLineTime("EndSession()"); 
     Disconnect();
+#endif
     
     // Just to be safe, although it shouldn't still be prefixed at this point.... 
 #ifdef USE_BT_PREFIX
     RemoveNamePrefix(); 
 #endif
 
+#if USE_BLUETOOTH == 1
     m_pBluetoothComms->EndSession();
+#endif
 
 //    CLEAR_OBJECT(m_DeviceFailed); 
     CLEAR_OBJECT(m_DeviceState);
@@ -750,6 +829,7 @@
 /*!============================================================================== 
  \brief  From MGameBTCommsNotify -- a client is trying to connect to me (as host)
 ==============================================================================*/ 
+#if USE_BLUETOOTH == 1
 void BluetoothManager::ConfirmRemoteDevice(const TDeviceDetails &a_Device)
 {
     char pName[256]; 
@@ -776,11 +856,12 @@
     }
 #endif
 }
-
+#endif
 
 /*!============================================================================== 
  \brief  I've finished connecting, and can now send messages.  (both host and client)
 ==============================================================================*/ 
+#if USE_BLUETOOTH == 1
 void BluetoothManager::Connected(TInt a_DeviceID, TInt a_Error)
 {
     if (KErrNone != a_Error)
@@ -821,6 +902,7 @@
         ++iter;
     }
 }
+#endif
 
 /*!============================================================================== 
  \brief  Someone just connected to me!  I'm the host.  So I need to update that
@@ -885,6 +967,7 @@
 /*!============================================================================== 
  \brief  I just assigned a device to a device ID...
 ==============================================================================*/ 
+#if USE_BLUETOOTH == 1
 void BluetoothManager::Declared(TInt a_DeviceID, const TDeviceDetails &a_Device, TInt a_Error)
 {
     if (KErrNone == a_Error)
@@ -909,7 +992,7 @@
         BB_LOG("ERROR: BTM::Declared(%d) failed.  Error: %d", a_DeviceID, a_Error); 
     }
 }
-
+#endif
 
 
 /*!============================================================================== 
@@ -917,6 +1000,7 @@
          to let everyone else know.  If I'm the client, the host disconnected
          from me... which is kinda bad.
 ==============================================================================*/ 
+#if USE_BLUETOOTH == 1
 void BluetoothManager::Disconnected(TInt a_DeviceID, TInt a_Error)
 {
     g_WriteLineTime(String("Device Disconnected: ") << a_DeviceID); 
@@ -950,12 +1034,13 @@
         pCallback->OnDisconnect(a_DeviceID); 
     }
 }
-
+#endif
 
 /*!============================================================================== 
  \brief  From MResolverNotify - this function is called whenever the client
          detects a possible host to connect to.
 ==============================================================================*/ 
+#if USE_BLUETOOTH == 1
 void BluetoothManager::FoundDevice(const TDeviceDetails &a_Device, TInt a_Error)
 {
     if (KErrNone == a_Error)
@@ -1007,13 +1092,14 @@
     }
     m_IdleTime = 0; 
 }
-
+#endif
 
 
 /*!============================================================================== 
  \brief  I just received some data over Bluetooth.  Convert it into a message
          and send it along to the message manager...
 ==============================================================================*/ 
+#if USE_BLUETOOTH == 1
 void BluetoothManager::ReceiveData(TInt /*a_DeviceID*/, const TDesC8& a_Data)
 {
     MessageBase* pMessage = (MessageBase*)a_Data.Ptr();
@@ -1064,7 +1150,7 @@
 //    g_MessageManager->ReceiveMessage((TUint8*)pMessage, a_Data.Size(), a_DeviceID); 
     g_MessageManager->ReceiveMessage((TUint8*)pMessage, a_Data.Size(), pMessage->m_SourceDeviceID); 
 }
-
+#endif
 
 /*!============================================================================== 
  \brief  Sends a message to either a specific device or all clients
@@ -1095,14 +1181,18 @@
             return;
         }
 
+#if USE_BLUETOOTH == 1
         TPtr8 pData(a_pData, a_Size, a_Size);
         m_pBluetoothComms->SendData(a_DeviceID, pData); 
+#endif
     }
     else
     {
         // Nope we're sending to everyone!  (Or just to the host if I'm a lowly client)
+#if USE_BLUETOOTH == 1
         TPtr8 pData(a_pData, a_Size, a_Size);
         m_pBluetoothComms->SendData(pData); 
+#endif
     }
 }
 
@@ -1211,7 +1301,9 @@
     if (IsClient() && m_IsSearchingForDevices)
     {
         m_IsSearchingForDevices = false;
+#if USE_BLUETOOTH == 1
         m_pResolver->CancelDeviceListRequest(); 
+#endif
     }
 }
 
@@ -1249,6 +1341,7 @@
          out non-RIFTS hosts (for clients searching for hosts).
   \note  Heavily based on original code written by Van Ly at Nokia.
 ==============================================================================*/ 
+#if USE_BLUETOOTH == 1
 #ifdef USE_BT_PREFIX
 bool BluetoothManager::AddNamePrefix()
 {
@@ -1291,11 +1384,13 @@
 
     return true;
 }
+#endif
 
 /*!============================================================================== 
  \brief  Restore the host name to its original name (get rid of the prefix)
   \note  Heavily based on original code written by Van Ly at Nokia.
 ==============================================================================*/ 
+#if USE_BLUETOOTH == 1
 void BluetoothManager::RemoveNamePrefix()
 {
     // First, check if the name was prefixed.. if not, do nothing.
@@ -1326,6 +1421,7 @@
 
 //    User::After(1000*1000); 
 }
+#endif
 
 /*!============================================================================== 
  \brief  
diff -ur Rifts/Code/src/Network/BluetoothManager.h Rifts_new/Code/src/Network/BluetoothManager.h
--- Rifts/Code/src/Network/BluetoothManager.h	2010-08-30 22:14:20.000000000 +0200
+++ Rifts_new/Code/src/Network/BluetoothManager.h	2021-12-11 21:35:51.652088600 +0100
@@ -9,8 +9,10 @@
 #ifndef __BLUETOOTHMANAGER_H__
 #define __BLUETOOTHMANAGER_H__
 
+#if USE_BLUETOOTH == 1
 #include <GameBTCommsNotify.h>
 #include <ResolverNotify.h>
+#endif
 #include <es_sock.h> // for THostName
 #include <BT_sock.h>
 #include "Utility/PulseUser.h"
@@ -30,8 +32,10 @@
 };
 
 // Forward declarations
+#if USE_BLUETOOTH == 1
 class CGameBTComms; 
 class CResolver; 
+#endif
 struct MessageBase; 
 struct MessageWelcome;
 class INetworkCallbacks;
@@ -45,13 +49,18 @@
 #define BT_IDLE_TIME 600000 // 10 mins idle time before a disconnect is forced
 #define BT_PING_TIME 5000 // ping every 5 secs...
 
+#if USE_BLUETOOTH == 1
 #define USE_BT_PREFIX
+#endif
 
 /*!============================================================================== 
  \brief  Bluetooth manager class that encapsulates all Bluetooth-related connectivity,
          wrapper for the Symbian Bluetooth API, etc.  All nice 'n' user friendly.
 ==============================================================================*/ 
-class BluetoothManager : public IMainObject, MGameBTCommsNotify, MGameBTCommsResolverNotify  
+class BluetoothManager : public IMainObject
+#if USE_BLUETOOTH == 1
+, MGameBTCommsNotify, MGameBTCommsResolverNotify  
+#endif
 {
 public:
     BluetoothManager(); 
@@ -68,15 +77,20 @@
 
     // Convenience functions
     uint CreateBattleID(); 
+#if USE_BLUETOOTH == 1
     const int& GetRealDeviceID() { return m_DeviceID; }
     int& GetVirtualDeviceID() { return m_VirtualDeviceID; }
+#endif
     bool IsBluetoothAvailable(); 
     bool IsBluetoothEnabled();
     bool IsConnected(); 
     bool IsDeviceConnected(int a_DeviceID); 
     bool IsClient(); 
     bool IsHost(); 
+
+#if USE_BLUETOOTH == 1
     int  GetDeviceType(const TDeviceDetails& a_Device); 
+#endif
     
     int  EnableBluetooth(bool a_Enabled);
     void SaveOriginalName();
@@ -84,7 +98,9 @@
     bool StartHost(int a_GameType, uint a_GameID); 
     bool RestartHost(); 
     bool StartClient(uint a_GameID); 
+#if USE_BLUETOOTH == 1
     void DeclareDevice(const TDeviceDetails& a_Device);
+#endif
     bool StartDeviceRequest();
     void CancelDeviceRequest(); 
 
@@ -94,12 +110,15 @@
     void ConnectionDone(); 
 
     // Accessor for BluetoothPowerSwitch (and other BT Active Objects *cough*)
+#if USE_BLUETOOTH == 1
     CGameBTComms* GetBTComms() { return m_pBluetoothComms; }
+#endif
 
     bool SetCurrentName(char* a_pName, bool a_bPreventSave = false);
     const THostName& GetCurrentName();
 
     // From MGameBTCommsNotify
+#if USE_BLUETOOTH == 1
     void ConfirmRemoteDevice(const TDeviceDetails &aDevice);                    // internal usage only
     void Connected(TInt aDeviceId, TInt aError);                                // internal usage only
     void Declared(TInt aDeviceId, const TDeviceDetails &aDevice, TInt aError);  // internal usage only
@@ -108,6 +127,7 @@
     
     // From MGameBTCommsResolverNotify
 	void FoundDevice(const TDeviceDetails &aDevice, TInt aError);               // internal usage only
+#endif
     
     // Misc. communication functionality
     void SendMessage(TUint8* a_pData, int a_Size, int a_DeviceID); 
@@ -130,8 +150,10 @@
 
 private:
     PulseUser                m_Pulse; 
+#if USE_BLUETOOTH == 1
     CGameBTComms*            m_pBluetoothComms;
     CResolver*               m_pResolver;
+#endif
     bool                     m_IsBluetoothDefaultEnabled; 
     NET_CALLBACK_LIST        m_NetworkCallbackList; 
 
@@ -149,7 +171,9 @@
 //    bool                     m_DeviceReplied[MAX_NETWORK_PLAYERS];
 //    int                      m_DeviceFailed[MAX_NETWORK_PLAYERS];
     THostName                m_DeviceName[MAX_NETWORK_PLAYERS];
+#if USE_BLUETOOTH == 1
     List<TDeviceDetails>     m_lDeviceDatails; //List of devices that are declared
+#endif
     
     int                      m_IdleTime; 
     int                      m_PingTime; 
diff -ur Rifts/Code/src/Network/Message.cpp Rifts_new/Code/src/Network/Message.cpp
--- Rifts/Code/src/Network/Message.cpp	2010-08-30 22:14:20.000000000 +0200
+++ Rifts_new/Code/src/Network/Message.cpp	2021-12-11 21:58:10.575039900 +0100
@@ -14,9 +14,12 @@
 
 #include "Network/BluetoothManager.h"
 #include "RiftsResourceID.h"
+#if USE_BLUETOOTH == 1
 #include "Game/Cores/BluetoothConnectionCore.h"
 #include "Game/Cores/BluetoothCore.h"
 #include "Game/Cores/BluetoothGameCore.h"
+#endif
+#include "Game/Cores/MultiplayerGameCore.h"
 #include "Game/Cores/ArenaCore.h"
 #include "Game/Cores/GameCore.h"
 #include "Main/IBaseCore.h"
@@ -52,21 +55,22 @@
 {
     switch(m_Flag)
     {
+#if USE_BLUETOOTH == 1
     case MSG_FLAG_CONNECTION_DONE: 
         ((BluetoothConnectionCore*)g_TopCore)->ConnectionDone(); 
         break;
-
+#endif
 //    case MSG_FLAG_READY:
 //        // This is sent by clients to the host to notify it that they're ready to start the game.
 //        ((BluetoothCore*)g_TopCore)->PlayerReady(a_DeviceID);
 //        break;
-
+#if USE_BLUETOOTH == 1
     case MSG_FLAG_BUSY:
         // This is sent by clients to the host to notify it that they're not ready to start the game.
         g_MessageManager->m_PlayerLevel[a_DeviceID] = 0; 
         ((BluetoothCore*)g_TopCore)->PlayerBusy(a_DeviceID); 
         break;
-    
+#endif
     case MSG_FLAG_LOAD_SECTOR_COMPLETE: 
         {
             g_MPPlayerState[a_DeviceID] = MP_PLAYER_STATE_SETUP_SECTOR; 
@@ -285,10 +289,12 @@
 void MessageClientReady::HandleMessage(int a_DeviceID)
 {
     g_MessageManager->m_PlayerLevel[a_DeviceID] = m_PartyLevel; 
+#if USE_BLUETOOTH == 1
     if (m_bReady)
         ((BluetoothCore*)g_TopCore)->PlayerReady(a_DeviceID);
     else
         ((BluetoothCore*)g_TopCore)->PlayerBusy(a_DeviceID);
+#endif
 }
 
 /*!============================================================================== 
@@ -303,7 +309,9 @@
 //    memcpy(g_MessageManager->m_PlayerLevel, m_PlayerLevel, sizeof(m_PlayerLevel)); 
 
     // !HACK!
+#if USE_BLUETOOTH == 1
     ((BluetoothCore*)g_TopCore)->StartGame(m_Sector);
+#endif
 }
 
 
@@ -313,14 +321,17 @@
 void MessageQuitGame::HandleMessage(int /*a_DeviceID*/)
 {
     BB_LOG("Device %d has quit the game", m_SourceDeviceID);
+#if USE_BLUETOOTH == 1
     BluetoothGameCore* pCore = (BluetoothGameCore*)g_CoreManager->GetCore(PG_GAME);
+#endif
     if (g_TopCore->GetPulseStage() == PG_GAME)
         ((GameCore*)g_CoreManager->GetCore(PG_GAME))->SendEvent(GSE_NETWORK, this);
+#if USE_BLUETOOTH == 1
     else if (pCore)
     {
         pCore->SetNextState(GS_PLAYER_QUIT);
     }
-
+#endif
 }
 
 
diff -ur Rifts/Code/src/Network/MessageManager.cpp Rifts_new/Code/src/Network/MessageManager.cpp
--- Rifts/Code/src/Network/MessageManager.cpp	2010-08-30 22:14:20.000000000 +0200
+++ Rifts_new/Code/src/Network/MessageManager.cpp	2021-12-11 21:55:27.121409200 +0100
@@ -133,11 +133,11 @@
     {
     case CONNECTION_NONE:
         return -1;
-
+#if USE_BLUETOOTH == 1
     case CONNECTION_BLUETOOTH: 
         //return g_BluetoothManager->GetDeviceID(); 
         return g_BluetoothManager->GetVirtualDeviceID(); 
-
+#endif
     case CONNECTION_GPRS: 
         return g_ArenaManager->GetDeviceID(); 
     default:
@@ -154,10 +154,10 @@
     {
     case CONNECTION_NONE:
         return 1; 
-
+#if USE_BLUETOOTH == 1
     case CONNECTION_BLUETOOTH:
         return g_BluetoothManager->GetNumPlayers(); 
-
+#endif
     case CONNECTION_GPRS: 
 		return g_ArenaManager->NumPlayers();
 
@@ -331,10 +331,12 @@
         stream << g_ArenaManager->GetDeviceID();
         stream.WriteBytesL(m_DroppedDevices, sizeof(m_DroppedDevices));
    }
+#if USE_BLUETOOTH == 1
     else if (IsBluetoothActive())
     {
         stream << g_BluetoothManager->GetVirtualDeviceID(); 
     }
+#endif
 
     stream.WriteBytesL(m_PlayerState, sizeof(m_PlayerState)); 
 
@@ -380,10 +382,12 @@
         stream >> g_ArenaManager->GetDeviceID();
         stream.ReadBytesL(m_DroppedDevices, sizeof(m_DroppedDevices));
     }
+#if USE_BLUETOOTH == 1
     else if (IsBluetoothActive())
     {
         stream >> g_BluetoothManager->GetVirtualDeviceID(); 
     }
+#endif
 
     stream.ReadBytesL(m_PlayerState, sizeof(m_PlayerState)); 
 
@@ -543,11 +547,12 @@
         // Now figure out what connection type we're on so we can send the message using the proper protocol
         switch(m_ConnectionType)
         {
+#if USE_BLUETOOTH == 1
         case CONNECTION_BLUETOOTH:
             a_pMessage->m_SourceDeviceID = (int8)g_BluetoothManager->GetRealDeviceID();  
             g_BluetoothManager->SendMessage(pData, a_MessageSize, a_DeviceID);  
             break;
-
+#endif
         case CONNECTION_GPRS: 
             a_pMessage->m_SourceDeviceID = (int8)g_ArenaManager->GetDeviceID();  
             a_pMessage->LogSend( "naf", a_DeviceID, a_MessageSize );
diff -ur Rifts/Code/src/System/SystemAppUi.cpp Rifts_new/Code/src/System/SystemAppUi.cpp
--- Rifts/Code/src/System/SystemAppUi.cpp	2010-08-30 22:14:20.000000000 +0200
+++ Rifts_new/Code/src/System/SystemAppUi.cpp	2021-12-11 21:29:48.877490900 +0100
@@ -14,8 +14,6 @@
 #include "common.h"
 #include "SystemAppUi.h"
 #include "SystemAppView.h" 
-#include "6R49.rsg"
-#include <NokiaFC.h>
 
 #include <avkon.hrh>
 #include <aknsoundsystem.h> 
@@ -62,11 +60,6 @@
 
     BaseConstructL();
     
-    // Call First Check routine
-    HBufC* errNote = iCoeEnv->AllocReadResourceLC(R_FC_ERROR_MSG);
-    FirstCheck::DoFirstCheckL(KGameId, errNote->Des());
-    CleanupStack::PopAndDestroy(); // errNote
-
     // Allocate a a bunch of space so we fail instantly
     // if free memory is very low.
     int i;
@@ -355,4 +348,4 @@
 	Exit();
 }
 
-// End of File  
\ No newline at end of file
+// End of File  
diff -ur Rifts/Code/src/System/SystemAppUi.h Rifts_new/Code/src/System/SystemAppUi.h
--- Rifts/Code/src/System/SystemAppUi.h	2010-08-30 22:14:20.000000000 +0200
+++ Rifts_new/Code/src/System/SystemAppUi.h	2021-12-11 21:29:30.395115600 +0100
@@ -19,7 +19,6 @@
 #include <e32std.h>
 #include <coeccntx.h>
 #include <aknappui.h>
-#include <BatteryState.h>
 
 // FORWARD DECLARATIONS
 class CSystemAppView;
@@ -75,4 +74,4 @@
 
 #endif // _SYSTEMAPPUI_H_
 
-// End of File
\ No newline at end of file
+// End of File
Only in Rifts_new: .git
